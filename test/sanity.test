(+ 1 1),2
(= 1 1),T
(quote foo),foo
(length (quote (a b c))),3
(length (quote ())),0
(if T "a" "b"), "a"
((if FALSE + -) 10 2),8
((lambda (a b) (- (+ b b) a)) 2 10 ),18
"abcd","abcd"
(quote ()), ()
1, 1
100000,100000
(* -1 10), -10
(define bb "asdf") bb, "asdf"
(define a 10) (define b 20) (- a b), -10
(define factorial (lambda (x) (if (= 1 x) 1 (* x (factorial (- x 1)))))) (factorial 5), 120
(= -222 -222), T
(eq? (quote foo) (quote foo)), T
(eq? (if T (quote foo) "a") (if FALSE "z" (quote foo))), T
(define x 4) (define toadd 4) (define mkadder (lambda (toadd) (lambda (x) (+ x toadd)))) (define addtwo (mkadder 2)) (define toadd 5) (define x 5) (addtwo 17), 19 #test lexical scope
(cons (+ 1 2) (if FALSE "a" (cons (quote a) "b"))), (3 a . "b")
(define x 4) (define toadd 4) (define mkadder (lambda (toadd) (lambda (x) (+ x toadd)))) (define addtwo (mkadder 2)) (define toadd 100) (define x 1000) (cons toadd (cons x (addtwo 17))), (100 1000 . 19)
(cons 1 (quote NIL)), (1)
(define a (cons "a" "b")) (set-cdr! a 10), ("a" . 10)
(define a (cons "a" "b")) (set-car! a 10), (10 . "b")
(list), ()
(list "a"), ("a")
(list 10 10 10), (10 10 10)
(list "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"), ("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z")
(lib-test-one 10), 11
(lib-test-zero), "lib-test0"
(vm-lib-test-one 10), 11
(vm-lib-test-zeroone), 11
(vm-lib-test-zero), "vm-test0"
(vm-test-one), error: undefined identifier: vm-test-one
(vm-test-zero), error: undefined identifier: vm-test-zero
